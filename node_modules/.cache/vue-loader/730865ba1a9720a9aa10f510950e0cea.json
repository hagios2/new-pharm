{"remainingRequest":"/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/oteng/Projects/Vue/Pharm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/oteng/Projects/Vue/Pharm/src/views/ui-kits/list.vue?vue&type=template&id=38bc08b1&","dependencies":[{"path":"/home/oteng/Projects/Vue/Pharm/src/views/ui-kits/list.vue","mtime":1600706974000},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/cache-loader/dist/cjs.js","mtime":1646200032053},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1646200032952},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/cache-loader/dist/cjs.js","mtime":1646200032053},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/index.js","mtime":1646200032952}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}