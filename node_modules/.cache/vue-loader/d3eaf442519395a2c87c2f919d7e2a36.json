{"remainingRequest":"/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/oteng/Projects/Vue/Pharm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/oteng/Projects/Vue/Pharm/src/containers/layouts/verticalSidebar/verticalTopbar.vue?vue&type=template&id=44ecce37&","dependencies":[{"path":"/home/oteng/Projects/Vue/Pharm/src/containers/layouts/verticalSidebar/verticalTopbar.vue","mtime":1600706974000},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/cache-loader/dist/cjs.js","mtime":1646200032053},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1646200032952},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/cache-loader/dist/cjs.js","mtime":1646200032053},{"path":"/home/oteng/Projects/Vue/Pharm/node_modules/vue-loader/lib/index.js","mtime":1646200032952}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}